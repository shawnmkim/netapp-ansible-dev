################################################################################
#
#   Author      :   Ken Hillier
#   Date        :   14 May 2021
#
#   Description :   Workflow to create multiple volumes based on a template
#
#   Dependencies: netapp.ontap collection
#
################################################################################
---
- hosts:                localhost
  name:                 Multi-Volume Creation Workflow
  gather_facts:         false
  collections:
    -                   ansible.builtin
    -                   netapp.ontap
  vars:
    login: &login
      hostname:         "{{ netapp_hostname }}"
      username:         "{{ netapp_username }}"
      password:         "{{ netapp_password }}"
      https:            "{{ netapp_https }}"
      validate_certs:   "{{ netapp_validate_certs }}"
    state:              present

    aggr: "{{ cluster }}_01_aggr1"
    vserver: ontap-vs01

  vars_files:
    vars/vars_multivol.yml

  pre_tasks:
    #---------------------------------------------------------------------------
    # PRE VALIDATION STEPS:
    #  - Attempting to mimic as much of WFA controls as possible
    #  - This performs the minimum possible validation against inputs
    #---------------------------------------------------------------------------
  - name:                       "Asserting mandatory storage details are defined properly"
    assert:
      that:
        -                       netapp_hostname is defined
        -                       netapp_username is defined
        -                       netapp_password is defined
        -                       netapp_https is defined
        -                       netapp_validate_certs is defined
        -                       vserver is defined
      fail_msg:                 "One or more variables are missing from submission"


  tasks:

  # Simple With sequence
  - name: Based on a count of volumes
    na_ontap_volume:
      <<: *login
      state: "{{ state }}"

      aggregate_name: "{{ aggr }}"
      vserver: "{{ vserver }}"

      # junction_path: '/{{ vol_type.[type]_[count]  | default(omit)  }}'
      #
      # name: "{{ vol_type.[ type ] }}_{{ count }}"
      #
      # size: "{{ vol_type.[type].size }}"
      # size_unit: "{{ vol_type.[type].size_unit | default('TB') }}"
      #
      # percent_snapshot_space: '{{ vol_type.[type].[snap_precent]  | default(0)  }}'
      # qos_policy_group: '{{ vol_type.[type].[qos_policy]  | default(omit)  }}'
      # snapshot_policy: '{{ vol_type.[type].[snap_policy]  | default(omit)  }}'
      # export_policy: '{{ vol_type.[type].export_policy  | default(omit)  }}'

      # junction_path: '/{{ type }}_{{ count }}  | default(omit)  }}'

      name: "{{ type }}_{{ count }}"

      # size: "{{ [type].size |int }}"
      # size_unit: "{{ type }}.size_unit"
      size: "{{ scratch.size | int }}"
      size_unit: "{{ scratch.size_unit}}"

      # comment: '{{ opt_volume_comment_01  | default(omit)  }}'

    with_sequence: count='{{ number }}'
    # loop:
    #   "{{  }}"
    loop_control:
      index_var: count
    register: results
    tags: create
