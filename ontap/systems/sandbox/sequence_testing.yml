################################################################################
#
#   Author      :   Ken Hillier
#   Date        :   14 May 2021
#
#   Description :   Workflow to create multiple volumes based on a template
#
#   Dependencies: netapp.ontap collection
#
################################################################################
---
- hosts:                localhost
  name:                 Multi-Volume Creation Workflow
  gather_facts:         false
  collections:
    -                   ansible.builtin
    -                   netapp.ontap
  vars:
    login: &login
      hostname:         "{{ netapp_hostname }}"
      username:         "{{ netapp_username }}"
      password:         "{{ netapp_password }}"
      https:            "{{ netapp_https }}"
      validate_certs:   "{{ netapp_validate_certs }}"
    state:              present

    # aggrs: "{{ lookup('file','aggrs.json') | from_json }}"
    # nodes: "{{ lookup('file','nodes.json') | from_json }}"
    #
    # # Other Variables that have to be declared but have no default
    # vserver:
    # aggr_list: []
    # node_list: []

  vars_files:
    vars/vars_multivol.yml

  pre_tasks:
    #---------------------------------------------------------------------------
    # PRE VALIDATION STEPS:
    #  - Attempting to mimic as much of WFA controls as possible
    #  - This performs the minimum possible validation against inputs
    #---------------------------------------------------------------------------
  - name:                       "Asserting mandatory storage details are defined properly"
    assert:
      that:
        -                       netapp_hostname is defined
        -                       netapp_username is defined
        -                       netapp_password is defined
        -                       netapp_https is defined
        -                       netapp_validate_certs is defined
        -                       vserver is defined
      fail_msg:                 "One or more variables are missing from submission"


  tasks:

  # - name: with_sequence
  #   ansible.builtin.debug:
  #     msg: "{{ item }}"
  #   with_sequence: start=0 end=4 stride=2 format=testuser%02x
  # - name: with_sequence -> loop
  #   ansible.builtin.debug:
  #     msg: "{{ 'testuser%02x' | format(item) }}"
  #   # range is exclusive of the end point
  #   loop: "{{ range(0, 4 + 1, 2)|list }}"

  # Ansible Docs Examples
  # - name: Create some test users
  #   user:
  #     name: "{{ item }}"
  #     state: "{{ state }}"
  #     groups: "evens"
  #   with_sequence: start=0 end=32 format=testuser%02x

  # - name: Display some test users
  #   debug:
  #     msg: "User: {{ item }}"
  #   with_sequence: start=0 end=32 format=testuser%02x
  #
  # - name: Create a series of directories with even numbers for some reason
  #   file:
  #     dest: "/tmp/multidirs/{{ item }}"
  #     state: directory
  #   with_sequence: start=4 end=16 stride=2
  #
  # # - name: A simpler way to use the sequence plugin create 4 groups
  # #   group:
  # #     name: "group{{ item }}"
  # #     state: "{{ state }}"
  # #   with_sequence: count=4
  #
  # - name: Display some groups
  #   debug:
  #     msg: "Group: group{{ item }}"
  #   with_sequence: count=4
  #
  # - name: the final countdown
  #   debug: msg="{{ item }} seconds to detonation"
  #   with_sequence: end=0 start=10 stride=-1
  #
  # - name: Use of varible
  #   debug:
  #     msg: "Count: {{ item }}"
  #   with_sequence: start=1 end="{{ end_at }}"
  #   vars:
  #     - end_at: 10
  #
  # # Begin volume name Dry-Run
  # - name: Begin Volume name dev
  #   ansible.builtin.debug:
  #     msg: "Begin Volume name testin"

  # # RAW volumes Dry-Run - with_sequence
  # - name: with_sequence
  #   ansible.builtin.debug:
  #     msg: "{{ item }}"
  #   with_sequence: start=1 end="{{ volcount }}" stride=1 format=scratch%03d

    # RAW volumes Dry-Run - loop
  - name: with_sequence -> loop
    ansible.builtin.debug:
      msg: "{{ '{{ voltype }}%03d' | format(item) }}"
    # range is exclusive of the end point
    loop: "{{ range(0, [ volcount | list ] + 1, 1)|list }}"
